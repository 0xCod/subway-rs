/// @title Sandwich
/// @notice SPDX-License-Identifier: MIT
/// @author asnared <https://github.com/abigger87>
/// @notice Modern, heavily-optimized sandwich contract.
/// @notice Adapted from libevm/subway (https://github.com/libevm/subway/blob/master/contracts/src/Sandwich.sol)

// Interface
#define function recoverERC20(address) nonpayable returns ()
#define function recoverETH() nonpayable returns ()

// Functions this contract will call
// NOTE: __FUNC_SIG builtin calls generate the function selector bytes4 at *compile time*

// bytes4 internal constant ERC20_TRANSFER_ID = 0xa9059cbb;
#define function transfer(address, uint256) nonpayable returns ()
// bytes4 internal constant PAIR_SWAP_ID = 0x022c0d9f;
#define function swap(uint256, uint256, address, bytes) nonpayable returns ()
#define function balanceOf(address) view returns (uint256)
#define function transfer(address,uint256) nonpayable returns ()

// The allowed user
// This will be overriden with the constructor flag
// The constructor logic will need to be copied within deploy scripts
// in order to inline the correct constants
#define constant USER = 0x00

/// @notice Empty Constructor
/// @notice This is purposefully defined to prevent imports with constructor overrides
#define macro CONSTRUCTOR() = {}

/// @notice Revert, but still (3, 3) wgmi I guess
#define macro WAGMI() = takes (0) returns (0) {
    0x03 dup1 revert
}

/// @notice Fetches the token balance of the caller for the provided token
/// @notice Stack Input: [token]
/// @notice Stack Output: [balance, token]
#define macro STATIC_CALL_TOKEN_BALANCE_MINUS_ONE(err) = takes (1) returns (2) {
    // Static Call token.balanceOf(address(this))
    __FUNC_SIG(balanceOf) 0x00 mstore       // [token]
    address 0x20 mstore                     // [token]

    0x20                                    // [retSize, token]
    0x00                                    // [retOffset, retSize, token]
    0x24                                    // [argSize, retOffset, retSize, token]
    0x1c                                    // [argOffset, argSize, retOffset, retSize, token]
    dup5                                    // [to, argOffset, argSize, retOffset, retSize, token]
    gas                                     // [gas, to, argOffset, argSize, retOffset, retSize, token]
    staticcall                              // [success, token]

    // Validate successful call
    iszero <err> jumpi                      // [token]
    0x00 mload                              // [balance, token]
    dup1 iszero skip jumpi
    0x01 swap1 sub                          // [(balance - 1), token]
    skip:                                   // [(balance - 1) | 0, token]
}

/// @notice Withdraws eth from this contract to the caller
#define macro RECOVER_ETH() = takes (0) returns (0) {
    // Get the balance of this contract
    0x00                                    // [retSize]
    dup1                                    // [retOffset, retSize]
    dup1                                    // [argSize, retOffset, retSize]
    dup1                                    // [argOffset, argSize, retOffset, retSize]
    selfbalance                             // [balance, argOffset, argSize, retOffset, retSize]
    caller                                  // [caller, balance, argOffset, argSize, retOffset, retSize]
    0x1388 gas sub                          // [(gas - 5000), caller, balance, argOffset, argSize, retOffset, retSize]
    call                                    // [success]

    // Validate call success
    iszero error jumpi stop
}

/// @notice Receive profits from contract
#define macro RECOVER_ERC20() = takes (0) returns (0) {
    0x04 calldataload                       // [token]

    // Get the balance of this contract
    STATIC_CALL_TOKEN_BALANCE_MINUS_ONE(error)        // [balance, token]

    // Call token.transfer(msg.sender, balance)
    __FUNC_SIG(transfer) 0x00 mstore    // [balance, token]
    caller 0x20 mstore                      // [balance, token]
    0x40 mstore                             // [token]

    0x00                                    // [retSize, token]
    0x00                                    // [retOffset, retSize, token]
    0x44                                    // [argSize, retOffset, retSize, token]
    0x1c                                    // [argOffset, argSize, retOffset, retSize, token]
    dup3                                    // [value, argOffset, argSize, retOffset, retSize, token]
    dup6                                    // [to, value, argOffset, argSize, retOffset, retSize, token]
    gas                                     // [gas, to, value, argOffset, argSize, retOffset, retSize, token]
    call                                    // [success, token]

    // Validate call success
    iszero error jumpi stop
}

/// @notice Executes a sandwich attack
#define macro EXECUTE_SANDWICH() = takes (0) returns (0) {
    // Unpack the calldata
    0x00 calldataload 0x60 shr              // [token] - bytes 20
    0x14 calldataload 0x60 shr              // [pair, token] - bytes 20
    0x28 calldataload 0x80 shr              // [amountIn, pair, token] - uint128
    0x38 calldataload 0x80 shr              // [amountOut, amountIn, pair, token] - uint128
    0x48 calldataload 0xE8 shr              // [tokenOutNo, amountOut, amountIn, pair, token] - uint8

    // Call token.transfer(pair, amountIn)
    __FUNC_SIG(transfer) 0xe0 shl 0x00 mstore        // [tokenOutNo, amountOut, amountIn, pair, token]
    dup4 0x04 mstore                        // [tokenOutNo, amountOut, amountIn, pair, token]
    dup3 0x24 mstore                        // [tokenOutNo, amountOut, amountIn, pair, token]

    0x00                    // [retSize, tokenOutNo, amountOut, amountIn, pair, token]
    0x00                    // [retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    0x44                    // [argSize, retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    dup2                    // [argOffset, argSize, retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    dup1                    // [value, argOffset, argSize, retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    dup10                   // [to, value, argOffset, argSize, retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    0x1388 gas sub          // [(gas - 5000), to, value, argOffset, argSize, retOffset, retSize, tokenOutNo, amountOut, amountIn, pair, token]
    call                    // [success, tokenOutNo, amountOut, amountIn, pair, token]

    // Validate call success
    iszero error jumpi       // [tokenOutNo, amountOut, amountIn, pair, token]

    // Call pair.swap(tokenOutNo == 0 ? amountOut : 0, tokenOutNo == 1 ? amountOut : 0, address(this), new bytes(0))
    __FUNC_SIG(swap) 0xe0 shl 0x00 mstore   // [tokenOutNo, amountOut, amountIn, pair, token]
    iszero _Zero_Token_out jumpi            // [amountOut, amountIn, pair, token]
        0x00 0x04 mstore                    // [amountOut, amountIn, pair, token]
        0x24 mstore                         // [amountIn, pair, token]
        __Continue_Swap_Call jumpi          // [amountIn, pair, token]
    _Zero_Token_out:
        0x04 mstore                         // [amountIn, pair, token]
        0x00 0x24 mstore                    // [amountIn, pair, token]

    __Continue_Swap_Call:

    address 0x44 mstore                     // [amountIn, pair, token]

    // Empty bytes memory should point to the next word
    0x84 0x64 mstore                        // [amountIn, pair, token]

    // Execute the call
    0x00                    // [retSize, amountIn, pair, token]
    0x00                    // [retOffset, retSize, amountIn, pair, token]
    0xc4                    // [argSize, retOffset, retSize, amountIn, pair, token]
    dup2                    // [argOffset, argSize, retOffset, retSize, amountIn, pair, token]
    dup1                    // [value, argOffset, argSize, retOffset, retSize, amountIn, pair, token]
    dup7                    // [to, value, argOffset, argSize, retOffset, retSize, amountIn, pair, token]
    0x1388 gas sub          // [(gas - 5000), to, value, argOffset, argSize, retOffset, retSize, amountIn, pair, token]
    call                    // [success, amountIn, pair, token]

    // Validate call success
    iszero error jumpi stop
}

/// @notice The main dispatch fallback
#define macro MAIN() = takes (0) returns (0) {
    // Get the function selector
    pc calldataload 0xE0 shr                                // [selector]

    // If the call has no data, receive()
    calldatasize iszero rcv jumpi                           // [selector]

    // Verify that the caller is the USER
    caller [USER] eq iszero error jumpi                     // [selector]

    // Now we can match on selector
    dup1 __FUNC_SIG(recoverERC20) eq recover_erc20 jumpi    // [selector]
    dup1 __FUNC_SIG(recoverETH) eq recover_eth jumpi        // [selector]

    EXECUTE_SANDWICH()                                      // _stops_

    error: WAGMI()                                          // _reverts_
    recover_eth: RECOVER_ETH()                              // _stops_
    recover_erc20: RECOVER_ERC20()                          // _stops_

    // Allows the contract to receive ether
    rcv: callvalue iszero error jumpi stop                  // _stops_
}